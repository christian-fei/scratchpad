# agile samurai
## agile in a nutshell
"Deliver somethign working, and of value every week". What does it take to do so?
Start looking at the software delivery from the customer`s point of view and you`ll
realize that working software released every week is fare more valuable (and important)
than documentation, plans and reports!

Documentation and plans are important, but only to enable working software, which is far
more important. Continuous testing, making sure the codebase is in the most optimal state,
this to avoid big-bang integrations, testing and surprises..

Also getting feedback is at the heart of agile software development. Without the feedback
from the customer, you`re driving on the highway through the fog without any light or
reference point, and you might get into a serious accident.

Agile principle: "Our highest priority is to satisfy the customer through early and continous 
delivery of valuable software."

## How does agile planning work?
A project plan is a list of high-level features the customer wants, prioritized by them, estimated
by the team.
The team commits to make some subset of features during the iteration, giving them responsibility
on the delivery. Although plans can change: scope, budget and priorities changes reflect on the
features and adaptive planning comes in.

## Done means done
Let's say you were hired to rake and clean the yard from the leaves. If you presented your employer
a plan of how you're going to do it, elegant design and instruments to rake the garden etc. you
wouldn't get a dollar for the work done. What counts is that the leaves are raked, and sitting
at the side of the house.

Delivering a feature in agile means producing shippable code at every iteration. Features/code that
has been thought about (analysis), tested, designed and ultimately coded and exchanged feedback 
with the customer and users.

Agile principle: "Working software is the primary measure of progress/success"

## Three Simple Truths

1) It is impossible to gather all the requirements at the beginning of a project
2) Whatever requirements you do gather are guaranteed to change
3) There will always be more to do than time and money will allow

When you start accepting the first truth you will not be afraid to begin your journey without
knowing everything up front. Requirements are meant to be discovered.

You need to continously adapt to the ever changing requirements, also the ones already "fixed".
You welcome change and have no longer fear of the second point.

Accepting the third truth allows you to no longer have nightmares about never ending todo-lists,
scope creeps and infinite backlogs. This is just the normal state of every project. There will always
be a feature more to add, something to change, etc.

## There is no one way!
Be it scrum, xp, lean, kanban, crystal, etc. There is no flavor to satisfy every project ever.
Scrum has proved itsself to be an effective project management technique. XP for highly disciplined and
effective programming practices. You need to start thinking for yourself, each project is differenet and
requires some variations of previos experiences.


# Chapter 2
# Meet your agile team
## How are agile projects different?
In an agile development team, roles are quite blurry, everyone can contribute to the project 
to get to the goal of the iteration. People normally still stick to the things they are good
at, but the possibility that everyone can contribute is a great productivity and commitment boost.

In an agile team analysis, coding, design and testing are continuous activities - they never end.
That said, development teams need to be assisted by business people to get continuous feedback
about the work that is being done. Quality is a team responsability, there is no separate QA department.


